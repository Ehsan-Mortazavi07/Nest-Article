// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

model User {
  id        Int       @id @default(autoincrement())
  fullname  String?   @default("EhsanMortazavi")
  image     String?   @default("default.png")
  email     String    @unique
  password  String
  token     String?   @unique
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  comments   Comment[]
  Likes      Like[]
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  picture     String?
  video       String?
  slug        String    @unique
  comments     Comment[]
  // view
  Likes        Like[]
  category  Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  body      String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  Article   Article   @relation(fields: [articleId], references: [id])
  articleId Int
  parentId  Int?
  parent    Comment?  @relation("CommentChildren", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentChildren")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id       Int        @id @default(autoincrement())
  title     String     @unique
  slug     String     @unique
  articles  Article[]
  parentId Int?
  parent   Category?  @relation("CatgoryChildren", fields: [parentId], references: [id])
  children Category[] @relation("CatgoryChildren")
}

model Like {
  isLiked   Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  Article   Article @relation(fields: [articleId], references: [id])
  articleId Int

  @@id([userId])
}

model ActivationCode {
  email     String
  code      String
  id        Int      @id @default(autoincrement())
  expire    String
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}
